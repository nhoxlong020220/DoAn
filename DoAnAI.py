# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15CbEsWs4_8qX4X8_YjOe-Fd2EFyuaunI
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd #thư viện phân tích dữ liệu
import numpy as np #thư viện toán học
import matplotlib.pyplot as plt #thư viện để trực quan hóa dữ liệu
# %matplotlib inline

from sklearn.preprocessing import MinMaxScaler #thư viện học máy

import keras #open source neural network
from keras.models import Sequential #tạo neural
from keras.layers import Dense, LSTM # thêm layer Dense, LSTM
import keras.backend as K

from google.colab import files
 
 
uploaded = files.upload()

pip install -r requirements.txt

from google.colab import files
 
 
uploaded = files.upload()

df = pd.read_csv('golds.csv') #đọc file csv

df.columns = ['date', 'price']# 2 cột chính là data và price
df['date'] = pd.to_datetime(df['date'])# format date
df = df.set_index('date')#để cột date index của bảng
df.head()# in ra 5 dòng đầu tiên của dataframe

df.plot(figsize=(15,10)) # kích thước của plot

df.describe()#tóm tắt các giá trị của 1 cột

split_date = pd.Timestamp('10-01-2016')
print(split_date)

train = df.loc[:split_date, ['price']]#từ đầu cho đến split_date
test = df.loc[split_date:, ['price']]#từ split_date đến cuối

ax = train.plot()#khai báo axis ( trục )
test.plot(ax=ax, figsize=(15,10))#vẽ  
plt.legend(['train', 'test'])# chú thích

sc = MinMaxScaler() # khai báo

train_sc = sc.fit_transform(train) #biến đổi tập train 
test_sc = sc.transform(test)#biến đổi tập test

train_sc[:4] #in ra 4 dòng đầu

train[:4] # in ra 4 dòng đầu

X_train = train_sc[:-1] # dùng để huấn luyện để dự đoán cái y
y_train = train_sc[1:] # kết quả có sẵn

X_test = test_sc[:-1] # dùng để kiểm thử
y_test = test_sc[1:]# dùng để dự đoán

train_sc.shape

X_train_t = X_train[:, None]
X_test_t = X_test[:, None]

X_train_t.shape

K.clear_session()
model = Sequential()

model.add(LSTM(4, input_shape=(1, 1)))

model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam')

model.fit(X_train_t, y_train, epochs=10, batch_size=1, verbose=1)

y_pred = model.predict(X_test_t)
plt.figure(figsize=(15, 10)) #dùng để vẽ
plt.plot(y_test)
plt.plot(y_pred)
plt.legend(['real', 'predict'])